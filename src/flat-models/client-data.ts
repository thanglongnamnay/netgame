// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Frames, FramesT } from './frames';


export class ClientData {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):ClientData {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsClientData(bb:flatbuffers.ByteBuffer, obj?:ClientData):ClientData {
  return (obj || new ClientData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsClientData(bb:flatbuffers.ByteBuffer, obj?:ClientData):ClientData {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ClientData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

myIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

playersFrames(index: number, obj?:Frames):Frames|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Frames()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

playersFramesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

serverAck():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startClientData(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMyIndex(builder:flatbuffers.Builder, myIndex:number) {
  builder.addFieldInt32(0, myIndex, 0);
}

static addPlayersFrames(builder:flatbuffers.Builder, playersFramesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, playersFramesOffset, 0);
}

static createPlayersFramesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startPlayersFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addServerAck(builder:flatbuffers.Builder, serverAck:number) {
  builder.addFieldInt32(2, serverAck, 0);
}

static endClientData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createClientData(builder:flatbuffers.Builder, myIndex:number, playersFramesOffset:flatbuffers.Offset, serverAck:number):flatbuffers.Offset {
  ClientData.startClientData(builder);
  ClientData.addMyIndex(builder, myIndex);
  ClientData.addPlayersFrames(builder, playersFramesOffset);
  ClientData.addServerAck(builder, serverAck);
  return ClientData.endClientData(builder);
}

unpack(): ClientDataT {
  return new ClientDataT(
    this.myIndex(),
    this.bb!.createObjList(this.playersFrames.bind(this), this.playersFramesLength()),
    this.serverAck()
  );
}


unpackTo(_o: ClientDataT): void {
  _o.myIndex = this.myIndex();
  _o.playersFrames = this.bb!.createObjList(this.playersFrames.bind(this), this.playersFramesLength());
  _o.serverAck = this.serverAck();
}
}

export class ClientDataT {
constructor(
  public myIndex: number = 0,
  public playersFrames: (FramesT)[] = [],
  public serverAck: number = 0
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const playersFrames = ClientData.createPlayersFramesVector(builder, builder.createObjectOffsetList(this.playersFrames));

  return ClientData.createClientData(builder,
    this.myIndex,
    playersFrames,
    this.serverAck
  );
}
}
