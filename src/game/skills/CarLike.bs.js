// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var Vec2$Netgame = require("../engine/Vec2.bs.js");

function reduce(t, action) {
  switch (action) {
    case /* NoSteer */0 :
        return {
                direction: t.direction,
                gas: t.gas,
                steer: /* No */0,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* SteerLeft */1 :
        return {
                direction: t.direction,
                gas: t.gas,
                steer: /* Left */1,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* SteerRight */2 :
        return {
                direction: t.direction,
                gas: t.gas,
                steer: /* Right */2,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* Release */3 :
        return {
                direction: t.direction,
                gas: /* No */0,
                steer: t.steer,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* SpeedUp */4 :
        return {
                direction: t.direction,
                gas: /* Forward */1,
                steer: t.steer,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* Reverse */5 :
        return {
                direction: t.direction,
                gas: /* Backward */2,
                steer: t.steer,
                turnRate: t.turnRate,
                stats: t.stats
              };
    case /* Break */6 :
        return {
                direction: t.direction,
                gas: /* Break */3,
                steer: t.steer,
                turnRate: t.turnRate,
                stats: t.stats
              };
    
  }
}

function step(param, input, dt) {
  var transform = param[2];
  var t = reduce(reduce(param[0], /* Release */3), /* NoSteer */0);
  var t$1 = Belt_Array.reduce(Belt_Array.keepMap(input.keys, (function (v) {
              if (v >= 101) {
                if (v !== 115) {
                  if (v !== 119) {
                    return ;
                  } else {
                    return /* SpeedUp */4;
                  }
                } else {
                  return /* Break */6;
                }
              } else if (v !== 97) {
                if (v >= 100) {
                  return /* SteerRight */2;
                } else {
                  return ;
                }
              } else {
                return /* SteerLeft */1;
              }
            })), t, reduce);
  var rotation = transform.rotation;
  var direction = t$1.direction;
  var turnRate = t$1.turnRate;
  var v = param[1].velocity;
  var magV = Vec2$Netgame.mag(v);
  var stats = t$1.stats;
  var deltaRotation = turnRate * dt * magV / stats.speed;
  var deltaRotation$1 = Vec2$Netgame.dot(Vec2$Netgame.rotate(direction, rotation), v) > 0 ? deltaRotation : -deltaRotation;
  var match = t$1.steer;
  var newRotaion;
  switch (match) {
    case /* No */0 :
        newRotaion = rotation;
        break;
    case /* Left */1 :
        newRotaion = rotation + deltaRotation$1;
        break;
    case /* Right */2 :
        newRotaion = rotation - deltaRotation$1;
        break;
    
  }
  var gasPower = stats.acceleration;
  var forward = Vec2$Netgame.rotate(direction, newRotaion);
  var right = Vec2$Netgame.rotate(forward, -3.14 / 2);
  var match$1 = t$1.gas;
  var motion = match$1 !== 1 ? (
      match$1 !== 0 ? Vec2$Netgame.mult(forward, -1) : Vec2$Netgame.zero
    ) : forward;
  var newAcceleration = Vec2$Netgame.mult(motion, gasPower);
  var lateralVelocity = Vec2$Netgame.mult(right, Vec2$Netgame.dot(v, right));
  var lateralFriction = Vec2$Netgame.mult(Vec2$Netgame.norm(lateralVelocity), -stats.handle);
  var backwardFriction = Vec2$Netgame.mult(Vec2$Netgame.norm(v), -20);
  var velocity = Vec2$Netgame.plus(v, Vec2$Netgame.mult(Vec2$Netgame.plus(backwardFriction, lateralFriction), dt));
  return [
          t$1,
          {
            velocity: velocity,
            acceleration: newAcceleration,
            maxSpeed: stats.speed
          },
          {
            position: transform.position,
            rotation: newRotaion,
            scale: transform.scale
          }
        ];
}

exports.reduce = reduce;
exports.step = step;
/* No side effect */
