// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Payload$Netgame = require("./Payload.bs.js");
var ImmuArray$Netgame = require("../lib/ImmuArray.bs.js");
var Rebuffers$Netgame = require("../lib/Rebuffers.bs.js");

function nope(param) {
  return {
          end: 0,
          payloads: ImmuArray$Netgame.make([])
        };
}

function create(end, frames) {
  return {
          end: end,
          payloads: frames
        };
}

function getFirstFrame(t) {
  return ImmuArray$Netgame.head(t.payloads);
}

function step(t, action) {
  if (typeof action === "number") {
    return {
            end: t.end,
            payloads: ImmuArray$Netgame.tail(t.payloads)
          };
  }
  switch (action.TAG | 0) {
    case /* Concat */0 :
        var other = action._0;
        return {
                end: t.end > other.end ? t.end : other.end,
                payloads: other.end > t.end ? ImmuArray$Netgame.concat(t.payloads, ImmuArray$Netgame.sliceFrom(other.payloads, t.end - other.end | 0)) : t.payloads
              };
    case /* RemoveFrom */1 :
        return {
                end: t.end,
                payloads: ImmuArray$Netgame.sliceFrom(t.payloads, action._0 - t.end | 0)
              };
    case /* AddPayload */2 :
        return {
                end: t.end + 1 | 0,
                payloads: ImmuArray$Netgame.concat(t.payloads, ImmuArray$Netgame.make([action._0]))
              };
    
  }
}

function serialize(t) {
  return {
          TAG: /* Schema */6,
          _0: [
            {
              TAG: /* Int */3,
              _0: t.end
            },
            {
              TAG: /* Array */5,
              _0: Rebuffers$Netgame.toList(ImmuArray$Netgame.toArray(t.payloads), Payload$Netgame.serialize)
            }
          ]
        };
}

function deserialize(schema) {
  if (schema.TAG === /* Schema */6) {
    var match = schema._0;
    if (match.length !== 2) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    var end = match[0];
    if (end.TAG === /* Int */3) {
      var payloads = match[1];
      return {
              end: end._0,
              payloads: ImmuArray$Netgame.make(Rebuffers$Netgame.deserialize(payloads, {
                        TAG: /* List */1,
                        _0: Payload$Netgame.deserialize
                      }))
            };
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

exports.nope = nope;
exports.create = create;
exports.getFirstFrame = getFirstFrame;
exports.step = step;
exports.serialize = serialize;
exports.deserialize = deserialize;
/* No side effect */
