// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var Belt_Option = require("@rescript/std/lib/js/belt_Option.js");
var Frames$Netgame = require("./Frames.bs.js");
var Socket$Netgame = require("./Socket.bs.js");
var Belt_HashMapInt = require("@rescript/std/lib/js/belt_HashMapInt.js");
var ImmuArray$Netgame = require("../lib/ImmuArray.bs.js");
var PlayerData$Netgame = require("./PlayerData.bs.js");

var serverData = Belt_HashMapInt.make(4);

function getPlayer(id) {
  return Belt_HashMapInt.get(serverData, id);
}

function addPlayer(rInfo) {
  var id = Socket$Netgame.hashId(rInfo);
  var player_frames = {
    end: -1,
    payloads: ImmuArray$Netgame.make([])
  };
  var player = {
    id: id,
    clientAck: -1,
    frames: player_frames
  };
  Belt_HashMapInt.set(serverData, id, player);
  return player;
}

function removePlayer(param) {
  return Belt_HashMapInt.remove(serverData, param);
}

function discardAcked(ack) {
  return Belt_Array.forEach(Belt_HashMapInt.valuesToArray(serverData), (function (playerData) {
                var playerData$1 = PlayerData$Netgame.step(playerData, {
                      TAG: /* Frames */1,
                      _0: {
                        TAG: /* RemoveFrom */1,
                        _0: ack
                      }
                    });
                if (ImmuArray$Netgame.length(playerData$1.frames.payloads) === 0) {
                  return Belt_HashMapInt.remove(serverData, playerData$1.id);
                } else {
                  return Belt_HashMapInt.set(serverData, playerData$1.id, playerData$1);
                }
              }));
}

function receivePlayerData(playerReceiveData) {
  var playerData = Belt_HashMapInt.get(serverData, playerReceiveData.id);
  if (playerData === undefined) {
    return ;
  }
  if (playerData.clientAck > playerReceiveData.clientAck) {
    return ;
  }
  var playerData$1 = PlayerData$Netgame.step(PlayerData$Netgame.step(playerData, {
            TAG: /* Frames */1,
            _0: {
              TAG: /* Concat */0,
              _0: playerReceiveData.frames
            }
          }), {
        TAG: /* Ack */0,
        _0: playerReceiveData.clientAck
      });
  return Belt_HashMapInt.set(serverData, playerData$1.id, playerData$1);
}

function getFirstFrames(t) {
  return Belt_Array.map(Belt_Array.map(Belt_Array.map(Belt_HashMapInt.valuesToArray(t), (function (p) {
                        return p.frames;
                      })), Frames$Netgame.getFirstFrame), Belt_Option.getExn);
}

exports.serverData = serverData;
exports.getPlayer = getPlayer;
exports.addPlayer = addPlayer;
exports.removePlayer = removePlayer;
exports.discardAcked = discardAcked;
exports.receivePlayerData = receivePlayerData;
exports.getFirstFrames = getFirstFrames;
/* serverData Not a pure module */
