// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");
var Tests$Netgame = require("../lib/Tests.bs.js");
var Frames$Netgame = require("./Frames.bs.js");
var Payload$Netgame = require("./Payload.bs.js");
var ImmuArray$Netgame = require("../lib/ImmuArray.bs.js");
var Rebuffers$Netgame = require("../lib/Rebuffers.bs.js");
var ClientRoom$Netgame = require("./ClientRoom.bs.js");

var sendData_myFrames = {
  end: 3,
  payloads: ImmuArray$Netgame.make([
        Payload$Netgame.nope,
        Payload$Netgame.nope
      ])
};

var sendData_otherAcks = [
  3,
  0
];

var sendData = {
  myIndex: 1,
  myFrames: sendData_myFrames,
  otherAcks: sendData_otherAcks
};

Tests$Netgame.run([
      [
        "TestClientData.res",
        10,
        13,
        82
      ],
      "serialize and deserialize sendData should be the same as do nothing"
    ], ClientRoom$Netgame.deserializeSend(ClientRoom$Netgame.serializeSend(sendData)), Tests$Netgame.equal, sendData);

var receiveData_players = Belt_Array.make(5, Frames$Netgame.nope(undefined));

var receiveData = {
  serverAck: 20,
  players: receiveData_players
};

Tests$Netgame.run([
      [
        "TestClientData.res",
        20,
        13,
        85
      ],
      "serialize and deserialize receiveData should be the same as do nothing"
    ], ClientRoom$Netgame.deserializeReceive(ClientRoom$Netgame.serializeReceive(receiveData)), Tests$Netgame.equal, receiveData);

var sendSchemad = ClientRoom$Netgame.serializeSend(sendData);

console.log("send schema", sendSchemad);

var testSchema = {
  TAG: /* Schema */6,
  _0: [
    {
      TAG: /* Int */3,
      _0: 1
    },
    {
      TAG: /* Bool */0,
      _0: true
    },
    {
      TAG: /* Array */5,
      _0: Rebuffers$Netgame.toList([
            1,
            2,
            3
          ], (function (i) {
              return {
                      TAG: /* Int */3,
                      _0: i
                    };
            }))
    }
  ]
};

Tests$Netgame.run([
      [
        "TestClientData.res",
        36,
        13,
        66
      ],
      "pack and read send should be the same as do nothing"
    ], ClientRoom$Netgame.deserializeSend(Rebuffers$Netgame.read(Rebuffers$Netgame.pack(ClientRoom$Netgame.serializeSend(sendData)), ClientRoom$Netgame.sendSchema)), Tests$Netgame.equal, sendData);

Tests$Netgame.run([
      [
        "TestClientData.res",
        47,
        13,
        73
      ],
      "pack and reac receiveData should be the same as do nothing"
    ], ClientRoom$Netgame.deserializeReceive(Rebuffers$Netgame.read(Rebuffers$Netgame.pack(ClientRoom$Netgame.serializeReceive(receiveData)), ClientRoom$Netgame.receiveSchema)), Tests$Netgame.equal, receiveData);

exports.sendData = sendData;
exports.receiveData = receiveData;
exports.sendSchemad = sendSchemad;
exports.testSchema = testSchema;
/* sendData Not a pure module */
