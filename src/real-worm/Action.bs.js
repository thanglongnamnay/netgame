// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("@rescript/std/lib/js/belt_Array.js");

function make(dtShoot, dtJump) {
  return {
          lastShoot: 0,
          lastJump: 0,
          dtShoot: dtShoot,
          dtJump: dtJump,
          queue: []
        };
}

function step(t, action, tick) {
  if (action.TAG === /* Shoot */0) {
    if ((tick - t.lastShoot | 0) >= t.dtShoot) {
      return {
              lastShoot: tick,
              lastJump: t.lastJump,
              dtShoot: t.dtShoot,
              dtJump: t.dtJump,
              queue: Belt_Array.concat(t.queue, [action])
            };
    } else {
      return t;
    }
  } else if ((tick - t.lastJump | 0) >= t.dtJump) {
    return {
            lastShoot: t.lastShoot,
            lastJump: tick,
            dtShoot: t.dtShoot,
            dtJump: t.dtJump,
            queue: Belt_Array.concat(t.queue, [action])
          };
  } else {
    return t;
  }
}

function clear(t) {
  return {
          lastShoot: t.lastShoot,
          lastJump: t.lastJump,
          dtShoot: t.dtShoot,
          dtJump: t.dtJump,
          queue: []
        };
}

function getShoot(t) {
  return Belt_Array.keepMap(t.queue, (function (action) {
                if (action.TAG === /* Shoot */0) {
                  return action._0;
                }
                
              }));
}

function getJump(t) {
  return Belt_Array.keepMap(t.queue, (function (action) {
                if (action.TAG === /* Shoot */0) {
                  return ;
                } else {
                  return action._0;
                }
              }));
}

exports.make = make;
exports.step = step;
exports.clear = clear;
exports.getShoot = getShoot;
exports.getJump = getJump;
/* No side effect */
