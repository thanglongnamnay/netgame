// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Char = require("rescript/lib/js/char.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Rebuffers$Netgame = require("../lib/Rebuffers.bs.js");

var nope_keys = [
  /* 'a' */97,
  /* 'b' */98
];

var nope_touchPos = {
  x: 0,
  y: 0
};

var nope = {
  keys: nope_keys,
  touches: 0,
  touchPos: nope_touchPos
};

function serialize(t) {
  return {
          TAG: /* Schema */6,
          _0: [
            {
              TAG: /* Array */5,
              _0: Rebuffers$Netgame.toList(t.keys, (function (key) {
                      return {
                              TAG: /* Byte */1,
                              _0: key
                            };
                    }))
            },
            {
              TAG: /* Byte */1,
              _0: t.touches
            },
            {
              TAG: /* Float */4,
              _0: t.touchPos.x
            },
            {
              TAG: /* Float */4,
              _0: t.touchPos.y
            }
          ]
        };
}

function deserialize(schema) {
  if (schema.TAG === /* Schema */6) {
    var match = schema._0;
    if (match.length !== 4) {
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    var keys = match[0];
    var touches = match[1];
    if (touches.TAG === /* Byte */1) {
      var x = match[2];
      if (x.TAG === /* Float */4) {
        var y = match[3];
        if (y.TAG === /* Float */4) {
          return {
                  keys: Belt_Array.map(Rebuffers$Netgame.deserialize(keys, {
                            TAG: /* Array */0,
                            _0: /* Byte */1
                          }), Char.chr),
                  touches: touches._0,
                  touchPos: {
                    x: x._0,
                    y: y._0
                  }
                };
        }
        throw {
              RE_EXN_ID: "Not_found",
              Error: new Error()
            };
      }
      throw {
            RE_EXN_ID: "Not_found",
            Error: new Error()
          };
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

exports.nope = nope;
exports.serialize = serialize;
exports.deserialize = deserialize;
/* No side effect */
